apiVersion: v1
kind: Service
metadata:
  name: {{ .Values.services.redis.name}}
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/part-of: trains-server
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
  namespace: {{ .Values.trains.namespace }}
spec:
  selector:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/part-of: trains-server
    app.kubernetes.io/managed-by: {{ .Release.Service }}
  type: ClusterIP
  ports:
  - protocol: TCP
    port: 6379
    targetPort: 6379
---
apiVersion: apps/v1
kind: Deployment
metadata:
  labels:
    app.kubernetes.io/name: redis
    app.kubernetes.io/instance: {{ .Release.Name }}
    app.kubernetes.io/part-of: trains-server
    app.kubernetes.io/managed-by: {{ .Release.Service }}
    helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
  name: redis
  namespace: {{ .Values.trains.namespace }}
spec:
  selector:
    matchLabels:
      app.kubernetes.io/name: redis
      app.kubernetes.io/instance: {{ .Release.Name }}
      app.kubernetes.io/part-of: trains-server
      app.kubernetes.io/managed-by: {{ .Release.Service }}
  minReadySeconds: 20
  progressDeadlineSeconds: 30
  strategy:
    type: Recreate
  template:
    metadata:
      labels:
        app.kubernetes.io/name: redis
        app.kubernetes.io/instance: {{ .Release.Name }}
        app.kubernetes.io/part-of: trains-server
        app.kubernetes.io/managed-by: {{ .Release.Service }}
        helm.sh/chart: {{ .Chart.Name }}-{{ .Chart.Version | replace "+" "_" }}
    spec:
      affinity:
        nodeAffinity:
          requiredDuringSchedulingIgnoredDuringExecution:
            nodeSelectorTerms:
              - matchExpressions:
                  - key: app
                    operator: In
                    values:
                    - trains
      containers:
      - image: redis:5.0
        name: redis
        resources:
          requests:
            memory: "100M"
            cpu: "200m"
          limits:
            memory: "100M"
            cpu: "400m"
        volumeMounts:
        - mountPath: /data
          name: redis-data
      restartPolicy: Always
      nodeSelector:
        {{ .Values.trains.nodeSelector}}
      volumes:
      - name: redis-data
        persistentVolumeClaim:
          claimName: redis-pv-claim